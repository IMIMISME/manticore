{%block imports %}
import unittest
from os.path import dirname, abspath, join
from manticore.platforms import wasm
from manticore.core import state
from manticore.core.smtlib import Operators, ConstraintSet
from manticore.wasm.types import I32, F32, I64, F64, Trap
import math

def assertEqualNan(testcase, a, b):
    if len(b) and len(a) and math.isnan(b[0]):
        testcase.assertTrue(math.isnan(a[0]))
    else:
        testcase.assertEqual(a, b)
{% endblock %}

{% for module in modules %}
class WASMTest_{{ module.name }}(unittest.TestCase):
    _multiprocess_can_split_ = False
    filename = join(dirname(abspath(__file__)), "{{ module.filename }}")

    def test_{{ module.name }}(self):
        constraints = ConstraintSet()
        world = wasm.WASMWorld(self.filename)

        world.instantiate({})
        {% for test in module.tests %}
        with self.subTest(msg="{{ test.func}}_L{{test.line}}"):
            print("======V====== SUBTEST :", "{{ test.func}}_L{{test.line}}", "======V======")
            {% if test.args | length > 0 %}
            argv=[{{ test.args }}]
            {% else %}
            argv=[]
            {% endif %}
            expected = [{{ test.rets }}]
            {% if test.type == "assert_return" %}
            world.invoke(name="{{ test.func }}", argv=argv)
            real = world.exec_for_test("{{test.func}}")
            assertEqualNan(self, real, expected)
            {% endif %}
            {% if test.type == "assert_trap" %}
            world.invoke(name="{{ test.func }}", argv=argv)
            real = world.exec_for_test("{{test.func}}")
            with self.assertRaises(Trap):
                world.exec_for_test("{{test.func}}")
            {% endif %}
            {% if test.type == "action" %}
            world.invoke(name="{{ test.func }}", argv=argv)
            world.exec_for_test("{{test.func}}")
            {% endif %}

        {% endfor %}

{% endfor %}

if __name__ == "__main__":
    unittest.main()
