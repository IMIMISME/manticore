{%block imports %}
import unittest
from os.path import dirname, abspath, join
from manticore.platforms import wasm
from manticore.core import state
from manticore.core.smtlib import Operators, ConstraintSet
from manticore.wasm.types import I32, F32, I64, F64
import math

def assertEqualNan(testcase, a, b):
    if math.isnan(b[0]):
        testcase.assertTrue(math.isnan(a[0]))
    else:
        testcase.assertEqual(a, b)
{% endblock %}

{% for module in modules %}
class WASMTest_{{ module.name }}(unittest.TestCase):
    _multiprocess_can_split_ = True
    filename = join(dirname(abspath(__file__)), "{{ module.filename }}")

{% for test in module.tests %}
    def test_{{ test.dedup_name }}_line{{test.line}}(self):
        constraints = ConstraintSet()
        world = wasm.WASMWorld(self.filename)

        world.instantiate({})
        {% if test.args | length > 0 %}
        argv=[{{ test.args }}]
        {% else %}
        argv=[]
        {% endif %}
        expected = [{{ test.rets }}]
        
        world.invoke(name="{{ test.func }}", argv=argv)
        real = world.exec_for_test("{{test.func}}")
        assertEqualNan(self, real, expected)

{% endfor %}
{% endfor %}

if __name__ == "__main__":
    unittest.main()
