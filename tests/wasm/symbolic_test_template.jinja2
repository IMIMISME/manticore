{%block imports %}
import unittest
from os.path import dirname, abspath, join
from manticore.platforms import wasm
from manticore.wasm import ManticoreWASM
from manticore.wasm.types import I32, F32, I64, F64, Trap
from base64 import b64decode
import math

def assertEqualNan(testcase, a, b):
    assert len(a) == 1, "Diverged into multiple states!"
    a = a[0]
    assert len(a) == len(b), f"Returned {len(a)} values! (Expected {len(b)}))"
    for a_item, b_item in zip(a, b):
        testcase.assertAlmostEqual(a_item, b_item)
{% endblock %}

{% for module in modules %}
class WASMTest_{{ module.name }}(unittest.TestCase):
    _multiprocess_can_split_ = False
    filename = join(dirname(abspath(__file__)), "{{ module.filename }}")
    subtest_count = 0

    def run(self, result=None):
        result = super().run(result)
        setattr(result, "testsRun", self.subtest_count + getattr(result, "testsRun", 0) - 1)
        return result

    def test_{{ module.name }}(self):
        m = ManticoreWASM(self.filename)

        {% for test in module.tests %}
        with self.subTest(msg={{ test.func | escape_null }} + "_L{{test.line}}"):
            print("======V======", {{ test.func | escape_null }} + "_L{{test.line}}", "======V======")
            self.subtest_count += 1

            def create_argv(state):
                argv = []
                {% for arg in test.args %}
                argv.append({{arg.constraint}})
                state.constrain(argv[-1] == {{arg.val}})
                {% endfor %}
                return argv

            expected = [{{ test.rets }}]
            {% if test.type == "assert_return" %}
            m.invoke(name={{ test.func | escape_null }}, argv_generator=create_argv)
            m.run()
            rets = m.collect_returns()
            m._reinit()
            assertEqualNan(self, rets, expected)
            {% endif %}
            {% if test.type == "assert_trap" %}
            m.invoke(name={{ test.func | escape_null }}, argv_generator=create_argv)
            with self.assertRaises(Trap):
                m.run()
            m._reinit()
            {% endif %}
            {% if test.type == "action" %}
            m.invoke(name={{ test.func | escape_null }}, argv_generator=create_argv)
            m.run()
            m._reinit()
            {% endif %}
        {% endfor %}

{% endfor %}

if __name__ == "__main__":
    unittest.main()
